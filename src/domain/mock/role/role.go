// Code generated by MockGen. DO NOT EDIT.
// Source: src/domain/role/role.go

// Package mock_role is a generated GoMock package.
package mock_role

import (
	reflect "reflect"

	model "github.com/achwanyusuf/carrent-accountsvc/src/model"
	psqlmodel "github.com/achwanyusuf/carrent-accountsvc/src/model/psqlmodel"
	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockRoleInterface is a mock of RoleInterface interface.
type MockRoleInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRoleInterfaceMockRecorder
}

// MockRoleInterfaceMockRecorder is the mock recorder for MockRoleInterface.
type MockRoleInterfaceMockRecorder struct {
	mock *MockRoleInterface
}

// NewMockRoleInterface creates a new mock instance.
func NewMockRoleInterface(ctrl *gomock.Controller) *MockRoleInterface {
	mock := &MockRoleInterface{ctrl: ctrl}
	mock.recorder = &MockRoleInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleInterface) EXPECT() *MockRoleInterfaceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRoleInterface) Delete(ctx *gin.Context, Role *psqlmodel.Role, id int64, isHardDelete bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, Role, id, isHardDelete)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRoleInterfaceMockRecorder) Delete(ctx, Role, id, isHardDelete interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRoleInterface)(nil).Delete), ctx, Role, id, isHardDelete)
}

// GetByParam mocks base method.
func (m *MockRoleInterface) GetByParam(ctx *gin.Context, cacheControl string, param *model.GetRolesByParam) (psqlmodel.RoleSlice, model.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByParam", ctx, cacheControl, param)
	ret0, _ := ret[0].(psqlmodel.RoleSlice)
	ret1, _ := ret[1].(model.Pagination)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByParam indicates an expected call of GetByParam.
func (mr *MockRoleInterfaceMockRecorder) GetByParam(ctx, cacheControl, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByParam", reflect.TypeOf((*MockRoleInterface)(nil).GetByParam), ctx, cacheControl, param)
}

// GetSingleByParam mocks base method.
func (m *MockRoleInterface) GetSingleByParam(ctx *gin.Context, cacheControl string, param *model.GetRoleByParam) (psqlmodel.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSingleByParam", ctx, cacheControl, param)
	ret0, _ := ret[0].(psqlmodel.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSingleByParam indicates an expected call of GetSingleByParam.
func (mr *MockRoleInterfaceMockRecorder) GetSingleByParam(ctx, cacheControl, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSingleByParam", reflect.TypeOf((*MockRoleInterface)(nil).GetSingleByParam), ctx, cacheControl, param)
}

// Insert mocks base method.
func (m *MockRoleInterface) Insert(ctx *gin.Context, data *psqlmodel.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockRoleInterfaceMockRecorder) Insert(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRoleInterface)(nil).Insert), ctx, data)
}

// Update mocks base method.
func (m *MockRoleInterface) Update(ctx *gin.Context, Role *psqlmodel.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, Role)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRoleInterfaceMockRecorder) Update(ctx, Role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRoleInterface)(nil).Update), ctx, Role)
}
